[done] prompt in heredoc
[done] signals in heredoc
[done] fix '&' should be known as a normal char
[done] export y=$x (x="a     b") {understand prb then fix it}
[done] touch x=hi export x=* {do not expand}
[done] fix is_numeric
[done] fix sigquit in heredoc
[ ] fix 'path/*' '*/' etc (use d_entry type )
[ ] fix syscall failure behavior
[ ] fix norminette
[ ] understand Anci quoting |  positional parameters
[ ] understand signals
[ ] ...
[] fix: exit should not print when it it forked
[] we should not setup all pipes at once, we should set them up while forking. fork dup close repeat
[] make one cleanup function and call it in heredoc and child process.






==7116==
Minishell > echo *
==7116== Invalid write of size 8
==7116==    at 0x10E08A: remove_hidden_files (expand_helper.c:31)
==7116==    by 0x10E58F: get_files (expand_pathname.c:37)
==7116==    by 0x10E61A: arg_traversal (expand_pathname.c:53)
==7116==    by 0x10E528: expand_pathname (expand_pathname.c:29)
==7116==    by 0x10D737: expander (expand.c:35)
==7116==    by 0x10D680: expand (expand.c:18)
==7116==    by 0x10BC52: execute_simple_cmd (exec_simple_cmd.c:20)
==7116==    by 0x10BC09: execute_command (exec_command.c:22)
==7116==    by 0x10BE93: execute_pipeline (exec_pipeline.c:29)
==7116==    by 0x10BB68: execute_compound (exec_compound.c:54)
==7116==    by 0x10963C: main (main.c:50)
==7116==  Address 0x4b5b0f0 is 0 bytes after a block of size 80 alloc'd
==7116==    at 0x4846828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==7116==    by 0x10A2E1: ft_malloc (ft_malloc.c:19)
==7116==    by 0x10DFE8: remove_hidden_files (expand_helper.c:25)
==7116==    by 0x10E58F: get_files (expand_pathname.c:37)
==7116==    by 0x10E61A: arg_traversal (expand_pathname.c:53)
==7116==    by 0x10E528: expand_pathname (expand_pathname.c:29)
==7116==    by 0x10D737: expander (expand.c:35)
==7116==    by 0x10D680: expand (expand.c:18)
==7116==    by 0x10BC52: execute_simple_cmd (exec_simple_cmd.c:20)
==7116==    by 0x10BC09: execute_command (exec_command.c:22)
==7116==    by 0x10BE93: execute_pipeline (exec_pipeline.c:29)
==7116==    by 0x10BB68: execute_compound (exec_compound.c:54)
==7116==

valgrind: m_mallocfree.c:304 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 144, hi = 79018656.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==7116==    at 0x58044A9A: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x58044BDF: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x58044D75: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x5804EDB8: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x5803CDCA: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x5803B3E7: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x5803FFD0: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x5803A260: ??? (in /usr/libexec/valgrind/memcheck-amd64-linux)
==7116==    by 0x100301EAE2: ???
==7116==    by 0x1002DADF0F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 7116)
==7116==    at 0x10E0C5: remove_hidden_files (expand_helper.c:34)
==7116==    by 0x10E58F: get_files (expand_pathname.c:37)
==7116==    by 0x10E61A: arg_traversal (expand_pathname.c:53)
==7116==    by 0x10E528: expand_pathname (expand_pathname.c:29)
==7116==    by 0x10D737: expander (expand.c:35)
==7116==    by 0x10D680: expand (expand.c:18)
==7116==    by 0x10BC52: execute_simple_cmd (exec_simple_cmd.c:20)
==7116==    by 0x10BC09: execute_command (exec_command.c:22)
==7116==    by 0x10BE93: execute_pipeline (exec_pipeline.c:29)
==7116==    by 0x10BB68: execute_compound (exec_compound.c:54)
==7116==    by 0x10963C: main (main.c:50)
client stack range: [0x1FFEFE6000 0x1FFF000FFF] client SP: 0x1FFEFFFE20
valgrind stack range: [0x1002CAE000 0x1002DADFFF] top usage: 18232 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.